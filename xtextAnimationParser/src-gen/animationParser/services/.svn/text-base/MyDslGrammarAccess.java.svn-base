/*
* generated by Xtext
*/
package animationParser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContainsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContainsAnimationParserRuleCall_0_0 = (RuleCall)cContainsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sequence:
		//	(contains+=Animation ";")*;
		public ParserRule getRule() { return rule; }

		//(contains+=Animation ";")*
		public Group getGroup() { return cGroup; }

		//contains+=Animation
		public Assignment getContainsAssignment_0() { return cContainsAssignment_0; }

		//Animation
		public RuleCall getContainsAnimationParserRuleCall_0_0() { return cContainsAnimationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Animation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAppearParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Animation:
		//	Move | Trigger | Appear;
		public ParserRule getRule() { return rule; }

		//Move | Trigger | Appear
		public Alternatives getAlternatives() { return cAlternatives; }

		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }

		//Trigger
		public RuleCall getTriggerParserRuleCall_1() { return cTriggerParserRuleCall_1; }

		//Appear
		public RuleCall getAppearParserRuleCall_2() { return cAppearParserRuleCall_2; }
	}

	public class AppearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Appear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeINTTerminalRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Appear:
		//	"appear" "(" time=INT ")";
		public ParserRule getRule() { return rule; }

		//"appear" "(" time=INT ")"
		public Group getGroup() { return cGroup; }

		//"appear"
		public Keyword getAppearKeyword_0() { return cAppearKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//time=INT
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_0() { return cTimeINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Trigger:
		//	{Trigger} "trigger" "(" ")";
		public ParserRule getRule() { return rule; }

		//{Trigger} "trigger" "(" ")"
		public Group getGroup() { return cGroup; }

		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//"trigger"
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Move:
		//	"move" "(" speed=INT ")";
		public ParserRule getRule() { return rule; }

		//"move" "(" speed=INT ")"
		public Group getGroup() { return cGroup; }

		//"move"
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }

		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private SequenceElements pSequence;
	private AnimationElements pAnimation;
	private AppearElements pAppear;
	private TriggerElements pTrigger;
	private MoveElements pMove;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("animationParser.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Sequence:
	//	(contains+=Animation ";")*;
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Animation:
	//	Move | Trigger | Appear;
	public AnimationElements getAnimationAccess() {
		return (pAnimation != null) ? pAnimation : (pAnimation = new AnimationElements());
	}
	
	public ParserRule getAnimationRule() {
		return getAnimationAccess().getRule();
	}

	//Appear:
	//	"appear" "(" time=INT ")";
	public AppearElements getAppearAccess() {
		return (pAppear != null) ? pAppear : (pAppear = new AppearElements());
	}
	
	public ParserRule getAppearRule() {
		return getAppearAccess().getRule();
	}

	//Trigger:
	//	{Trigger} "trigger" "(" ")";
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//Move:
	//	"move" "(" speed=INT ")";
	public MoveElements getMoveAccess() {
		return (pMove != null) ? pMove : (pMove = new MoveElements());
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
