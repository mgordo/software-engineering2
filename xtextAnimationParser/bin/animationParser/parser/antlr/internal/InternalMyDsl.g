/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package animationParser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package animationParser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import animationParser.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Sequence";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getContainsAnimationParserRuleCall_0_0()); 
	    }
		lv_contains_0_0=ruleAnimation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_0_0, 
        		"Animation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getSemicolonKeyword_1());
    }
)*
;





// Entry rule entryRuleAnimation
entryRuleAnimation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnimationRule()); }
	 iv_ruleAnimation=ruleAnimation 
	 { $current=$iv_ruleAnimation.current; } 
	 EOF 
;

// Rule Animation
ruleAnimation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAnimationAccess().getMoveParserRuleCall_0()); 
    }
    this_Move_0=ruleMove
    { 
        $current = $this_Move_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnimationAccess().getTriggerParserRuleCall_1()); 
    }
    this_Trigger_1=ruleTrigger
    { 
        $current = $this_Trigger_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnimationAccess().getAppearParserRuleCall_2()); 
    }
    this_Appear_2=ruleAppear
    { 
        $current = $this_Appear_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAppear
entryRuleAppear returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAppearRule()); }
	 iv_ruleAppear=ruleAppear 
	 { $current=$iv_ruleAppear.current; } 
	 EOF 
;

// Rule Appear
ruleAppear returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='appear' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAppearAccess().getAppearKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAppearAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_time_2_0=RULE_INT
		{
			newLeafNode(lv_time_2_0, grammarAccess.getAppearAccess().getTimeINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAppearRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"time",
        		lv_time_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAppearAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTriggerAccess().getTriggerAction_0(),
            $current);
    }
)	otherlv_1='trigger' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTriggerAccess().getTriggerKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTriggerAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTriggerAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	 iv_ruleMove=ruleMove 
	 { $current=$iv_ruleMove.current; } 
	 EOF 
;

// Rule Move
ruleMove returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='move' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMoveAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_speed_2_0=RULE_INT
		{
			newLeafNode(lv_speed_2_0, grammarAccess.getMoveAccess().getSpeedINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMoveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"speed",
        		lv_speed_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMoveAccess().getRightParenthesisKeyword_3());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


